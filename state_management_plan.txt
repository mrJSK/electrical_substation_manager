State Management Plan for User Roles & Permissions
The Challenge
The core requirement is to create a dynamic user experience based on a deep hierarchy of roles. An admin can see everything, while a subdivisionManager can only see and interact with data relevant to their specific subdivision. Our state management must be able to:

Reliably identify the logged-in user's role and permissions.

Determine the scope of their access (e.g., which specific Zone or Circle they manage).

Efficiently filter data based on that scope, even when offline.

Dynamically render UI components (dashboards, menus, buttons) based on their role.

Remain performant and responsive, even with large amounts of data.

The Architecture: A 3-Layered Riverpod Approach
We will structure our state around a central, intelligent authentication provider. This creates a clear, top-down flow of user data that the rest of the app can react to.

Layer 1: The Data Models (models/)
We'll start with enhanced data models that include not just user roles, but a fine-grained permission system.

1. The Enhanced AppUser Model

We'll use freezed for a robust, immutable user object that includes permissions and role-specific data.

// models/app_user.dart

import 'package:freezed_annotation/freezed_annotation.dart';
import 'package:firebase_auth/firebase_auth.dart' as firebase;

part 'app_user.freezed.dart';
part 'app_user.g.dart';

// The enum for all possible user roles
enum UserRole {
  admin,
  stateManager,
  companyManager,
  zoneManager,
  circleManager,
  divisionManager,
  subdivisionManager,
  substationUser,
  unknown, // For error cases
}

@freezed
class AppUser with _$AppUser {
  const AppUser._(); // Private constructor for helper methods

  const factory AppUser({
    required String uid,
    required String email,
    required String name,
    String? photoUrl,
    required UserRole role,
    
    // The ID of the specific entity this user manages.
    String? hierarchyId, 

    // --- Data Model Enhancements ---
    // A list of specific permissions this user has (e.g., 'edit_user', 'delete_report')
    @Default([]) List<String> permissions,
    // A map for role-specific data, e.g., {'accessibleZones': ['zone1', 'zone2']}
    @Default({}) Map<String, dynamic> roleData,
    DateTime? lastLogin,
    @Default(true) bool isActive,
    
    // For offline capability
    DateTime? lastSynced,
  }) = _AppUser;

  factory AppUser.fromJson(Map<String, dynamic> json) => _$AppUserFromJson(json);

  // Helper method to check for a specific permission
  bool hasPermission(String permission) => permissions.contains(permission) || role == UserRole.admin;

  // Helper to check if user can access a specific hierarchy level
  bool canAccessHierarchy(String hierarchyId) {
    if (role == UserRole.admin) return true;
    
    switch (role) {
      case UserRole.zoneManager:
        return roleData['accessibleZones']?.contains(hierarchyId) ?? false;
      // ... other role-specific access logic
      default:
        return this.hierarchyId == hierarchyId;
    }
  }
}

2. Role Configuration

Centralize role-based permissions and screen access for easy management.

// config/role_config.dart

class RoleConfig {
  static const Map<UserRole, List<String>> rolePermissions = {
    UserRole.admin: ['read_all', 'write_all', 'delete_all', 'manage_users'],
    UserRole.stateManager: ['read_state', 'write_state', 'manage_company'],
    UserRole.zoneManager: ['read_zone', 'write_zone', 'manage_circle'],
    // ... define permissions for all other roles
  };

  static const Map<UserRole, List<String>> accessibleScreens = {
    UserRole.admin: ['dashboard', 'users', 'reports', 'settings'],
    UserRole.zoneManager: ['dashboard', 'reports', 'settings'],
    // ... define screen access for all other roles
  };
}

Layer 2: The Brains - Resilient Auth & Data Services
We'll use the Repository Pattern to separate our data logic from the UI and introduce robust error handling and caching.

1. The User Repository

This abstract class defines the contract for user data operations.

// repositories/user_repository.dart

abstract class UserRepository {
  Stream<AppUser?> watchUserProfile(String uid);
  Future<AppUser?> getUserProfile(String uid);
  Future<void> updateUserProfile(AppUser user);
}

class FirestoreUserRepository implements UserRepository {
  // ... Implementation with Firestore, proper error handling, and caching
}

2. The Central authProvider

This provider is now more resilient. It handles different states (loading, authenticated, error), manages connection status, and uses a cache.

// auth/auth_provider.dart

// 1. Define all possible authentication states
enum AuthError { networkError, permissionDenied, userNotFound, unknown }

@freezed
class AuthState with _$AuthState {
  const factory AuthState.loading() = _Loading;
  const factory AuthState.authenticated(AppUser user) = _Authenticated;
  const factory AuthState.unauthenticated() = _Unauthenticated;
  const factory AuthState.error(AuthError error, String message) = _Error;
}

// 2. Create the provider
@riverpod
class Auth extends _$Auth {
  final _userCache = <String, AppUser>{};

  @override
  Stream<AuthState> build() {
    // Listen to Firebase Auth state changes
    return firebase.FirebaseAuth.instance.authStateChanges().asyncMap((firebaseUser) async {
      if (firebaseUser == null) {
        return const AuthState.unauthenticated();
      }

      // Check for cached user first
      if (_userCache.containsKey(firebaseUser.uid)) {
        return AuthState.authenticated(_userCache[firebaseUser.uid]!);
      }

      // Fetch from repository (which handles its own caching and errors)
      try {
        final userProfile = await ref.read(userRepositoryProvider).getUserProfile(firebaseUser.uid);
        if (userProfile != null) {
          _userCache[userProfile.uid] = userProfile; // Update cache
          return AuthState.authenticated(userProfile);
        } else {
          // Handle new user creation or return error
          return const AuthState.error(AuthError.userNotFound, "User profile not found.");
        }
      } catch (e) {
        return AuthState.error(AuthError.unknown, e.toString());
      }
    });
  }

  Future<void> signOut() async {
    _userCache.clear();
    await firebase.FirebaseAuth.instance.signOut();
  }
}

Layer 3: The UI - Dynamic and Role-Aware
The UI layer now reacts to a more descriptive AuthState.

// In your main app widget or a dedicated wrapper
class AuthWrapper extends ConsumerWidget {
  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final authState = ref.watch(authProvider);

    return authState.when(
      authenticated: (user) => HomeScreen(user: user),
      unauthenticated: () => const SignInScreen(),
      loading: () => const SplashScreen(),
      error: (error, message) => ErrorScreen(message: message),
    );
  }
}

Advanced Architecture: Production-Ready Features
Performance & Scalability
1. Pagination for Large Lists

For screens with thousands of items, we must use pagination.

// providers/paginated_data_provider.dart
@riverpod
class PaginatedData<T> extends _$PaginatedData {
  @override
  Future<List<T>> build(Query baseQuery, int pageSize) {
    // Initial fetch logic
  }

  Future<void> loadNextPage() {
    // Logic to fetch the next set of documents using query cursors
  }
}

2. Data Preloading

Improve perceived performance by preloading critical data after login.

// providers/preload_provider.dart
@riverpod
Future<void> preloadUserData(PreloadUserDataRef ref) async {
  // Wait for authentication to complete
  final authState = await ref.watch(authProvider.future);
  
  if (authState is _Authenticated) {
    final user = authState.user;
    // Preload role-specific data
    switch (user.role) {
      case UserRole.zoneManager:
        // Trigger the fetch for zone data, but don't wait for it.
        // The specific dashboard will use the already-loading data.
        ref.read(zoneDataProvider(user.hierarchyId!));
        break;
      // ... other cases
    }
  }
}

Offline & Background Operations
1. Connection Management

The app needs to be aware of the network status to switch between online and offline data sources.

// providers/connection_provider.dart
// (Requires a package like `connectivity_plus`)
final connectionStatusProvider = StreamProvider<ConnectivityResult>((ref) {
  return Connectivity().onConnectivityChanged;
});

// In your data repositories:
Stream<MyData> getData() {
  final connection = ref.watch(connectionStatusProvider);
  if (connection.asData?.value == ConnectivityResult.none) {
    // Fetch from local Isar DB
    return isarService.getData();
  } else {
    // Fetch from Firestore and sync to Isar
    return firestoreService.getData().onData((data) {
      isarService.cacheData(data);
    });
  }
}

2. Background Sync

For offline changes, a background sync mechanism is essential.

// services/sync_service.dart
// (Requires a package like `workmanager` or `flutter_background_service`)
class SyncService {
  void queueChange(Map<String, dynamic> change) {
    // Add change to a local "pending" queue in Isar
  }

  Future<void> executeSync() async {
    // 1. Check for connection.
    // 2. Read all pending changes from the queue.
    // 3. Send them to Firestore in a batch write.
    // 4. On success, clear the queue.
  }
}

Monitoring & Configuration
1. Performance and Error Monitoring

Integrate a service like Firebase Performance Monitoring & Crashlytics.

// utils/monitoring_service.dart
class AppMonitor {
  static void trackScreenView(String screenName) { /* ... */ }
  static void trackError(dynamic error, StackTrace stack) { /* ... */ }
}

2. Central App Configuration

Manage feature flags, timeouts, and other settings from a single provider.

// config/app_config_provider.dart
@riverpod
AppConfig appConfig(AppConfigRef ref) {
  // This could be loaded from a remote source (Remote Config) or be static.
  return AppConfig(
    syncInterval: const Duration(minutes: 15),
    offlineModeEnabled: true,
  );
}
